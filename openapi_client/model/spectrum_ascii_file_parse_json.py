"""
    Fritz: SkyPortal API

    SkyPortal provides an API to access most of its underlying functionality. To use it, you will need an API token. This can be generated via the web application from your profile page or, if you are an admin, you may use the system provisioned token stored inside of `.tokens.yaml`.  ### Accessing the SkyPortal API  Once you have a token, you may access SkyPortal programmatically as follows.  #### Python  ```python import requests  token = 'ea70a5f0-b321-43c6-96a1-b2de225e0339'  def api(method, endpoint, data=None):     headers = {'Authorization': f'token {token}'}     response = requests.request(method, endpoint, json=data, headers=headers)     return response  response = api('GET', 'http://localhost:5000/api/sysinfo')  print(f'HTTP code: {response.status_code}, {response.reason}') if response.status_code in (200, 400):     print(f'JSON response: {response.json()}') ```  #### Command line (curl)  ```shell curl -s -H 'Authorization: token ea70a5f0-b321-43c6-96a1-b2de225e0339' http://localhost:5000/api/sysinfo ```  ### Response  In the above examples, the SkyPortal server is located at `http://localhost:5000`. In case of success, the HTTP response is 200:  ``` HTTP code: 200, OK JSON response: {'status': 'success', 'data': {}, 'version': '0.9.dev0+git20200819.84c453a'} ```  On failure, it is 400; the JSON response has `status=\"error\"` with the reason for the failure given in `message`:  ```js {   \"status\": \"error\",   \"message\": \"Invalid API endpoint\",   \"data\": {},   \"version\": \"0.9.1\" } ```  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 0.9.dev0+git20201221.76627dd
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


class SpectrumAsciiFileParseJSON(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'ascii': (str,),  # noqa: E501
            'fluxerr_column': (int, none_type,),  # noqa: E501
            'flux_column': (int,),  # noqa: E501
            'wave_column': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'ascii': 'ascii',  # noqa: E501
        'fluxerr_column': 'fluxerr_column',  # noqa: E501
        'flux_column': 'flux_column',  # noqa: E501
        'wave_column': 'wave_column',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, ascii, *args, **kwargs):  # noqa: E501
        """SpectrumAsciiFileParseJSON - a model defined in OpenAPI

        Args:
            ascii (str): The content of the ASCII file to be parsed.  The file can optionally contain a header which will be parsed and stored.  The lines that make up the ASCII header must appear at the beginning of the file and all be formatted the same way within a single file. They can be formatted in one of two ways.  ``` 1) # KEY: VALUE 2) # KEY = VALUE / COMMENT ```  `astropy.io.ascii.read` is used to load the table into Python memory. An attempt is made to parse the header first using method 1, then method 2.  Example of format 1:  ``` # XTENSION: IMAGE # BITPIX: -32 # NAXIS: 2 # NAXIS1: 433 # NAXIS2: 1 # RA: 230.14 ```  Example of format 2:  ``` # FILTER  = 'clear   '           / Filter # EXPTIME =              600.003 / Total exposure time (sec); avg. of R&B # OBJECT  = 'ZTF20abpuxna'       / User-specified object name # TARGNAME= 'ZTF20abpuxna_S1'    / Target name (from starlist) # DICHNAME= '560     '           / Dichroic # GRISNAME= '400/3400'           / Blue grism # GRANAME = '400/8500'           / Red grating # WAVELEN =        7829.41406250 / Red specified central wavelength # BLUFILT = 'clear   '           / Blue filter # REDFILT = 'Clear   '           / Red filter # SLITNAME= 'long_1.0'           / Slitmask # INSTRUME= 'LRIS+LRISBLUE'      / Camera # TELESCOP= 'Keck I  '           / Telescope name # BLUDET  = 'LRISB   '           / LRIS blue detector # REDDET  = 'LRISR3  '           / LRIS red detector # OBSERVER= 'Andreoni Anand De'  / Observer name # REDUCER = '        '           / Name of reducer # LPIPEVER= '2020.06 '           / LPipe version number # HOSTNAME= 'gayatri '           / LPipe host computer name # IDLVER  = '8.1     '           / IDL version number # DATE    = '2020-09-15T09:47:10' / UT end of last exposure ```  The data must be at least 2 column ascii (wavelength, flux). If three columns are given, they are interpreted as (wavelength, flux, fluxerr). If more than 3 columns are given, by default the first three are interpreted as (wavelength, flux, fluxerr). The column indices of each of these arguments can be controlled by passing the integer column index to the POST JSON.  Examples of valid data sections:  Many-column ASCII:  ```    10295.736  2.62912e-16  1.67798e-15  2.24407e-17    4084    75.956  5.48188e+15  0    10296.924  2.96887e-16  1.57197e-15  2.21469e-17    4085    75.959  5.42569e+15  0    10298.112  3.20429e-16  1.45017e-15  2.16863e-17    4086    75.962  5.36988e+15  0    10299.301  3.33367e-16  1.06116e-15  1.94187e-17    4087    75.965  5.31392e+15  0    10300.489  3.09943e-16  6.99539e-16  1.67183e-17    4088    75.968  5.25836e+15  0    10301.678  3.48273e-16  5.56194e-16  1.59555e-17    4089    75.972  5.20314e+15  0    10302.866  3.48102e-16  5.28483e-16  1.58033e-17    4090    75.975  5.15146e+15  0    10304.055  3.78640e-16  6.00997e-16  1.67462e-17    4091    75.978  5.10058e+15  0    10305.243  4.28820e-16  7.18759e-16  1.81534e-17    4092    75.981  5.05032e+15  0    10306.432  4.13152e-16  7.54203e-16  1.83965e-17    4093    75.984  5.00097e+15  0 ```  3-column ASCII:  ``` 8993.2 1.148e-16 7.919e-34 9018.7 1.068e-16 6.588e-34 9044.3 1.056e-16 5.660e-34 9069.9 9.763e-17 5.593e-34 9095.4 1.048e-16 8.374e-34 9121.0 1.026e-16 8.736e-34 9146.6 8.472e-17 9.505e-34 9172.1 9.323e-17 7.592e-34 9197.7 1.050e-16 7.863e-34 9223.3 8.701e-17 7.135e-34 ```  2-column ASCII:  ```       10045.1    0.0217740       10046.3    0.0182158       10047.4    0.0204764       10048.6    0.0231833       10049.8    0.0207157       10051.0    0.0185226       10052.2    0.0200072       10053.4    0.0205159       10054.5    0.0199460       10055.7    0.0210533 ```   2-column ASCII: ``` 7911.60 1.045683 7920.80 1.046414 7930.00 1.235362 7939.20 0.783466 7948.40 1.116153 7957.60 1.375844 7966.80 1.029127 7976.00 1.019637 7985.20 0.732859 7994.40 1.236514 ```  

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            fluxerr_column (int, none_type): The 0-based index of the ASCII column corresponding to the flux error values of the spectrum (default 2). If there are only 2 columns in the input file this value will be ignored. If there are more than 2 columns in the input file, but none of them correspond to flux error values, set this parameter to `None`.. [optional]  # noqa: E501
            flux_column (int): The 0-based index of the ASCII column corresponding to the flux values of the spectrum (default 1).. [optional] if omitted the server will use the default value of 1  # noqa: E501
            wave_column (int): The 0-based index of the ASCII column corresponding to the wavelength values of the spectrum (default 0).. [optional] if omitted the server will use the default value of 0  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.ascii = ascii
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
