"""
    Fritz: SkyPortal API

    SkyPortal provides an API to access most of its underlying functionality. To use it, you will need an API token. This can be generated via the web application from your profile page or, if you are an admin, you may use the system provisioned token stored inside of `.tokens.yaml`.  ### Accessing the SkyPortal API  Once you have a token, you may access SkyPortal programmatically as follows.  #### Python  ```python import requests  token = 'ea70a5f0-b321-43c6-96a1-b2de225e0339'  def api(method, endpoint, data=None):     headers = {'Authorization': f'token {token}'}     response = requests.request(method, endpoint, json=data, headers=headers)     return response  response = api('GET', 'http://localhost:5000/api/sysinfo')  print(f'HTTP code: {response.status_code}, {response.reason}') if response.status_code in (200, 400):     print(f'JSON response: {response.json()}') ```  #### Command line (curl)  ```shell curl -s -H 'Authorization: token ea70a5f0-b321-43c6-96a1-b2de225e0339' http://localhost:5000/api/sysinfo ```  ### Response  In the above examples, the SkyPortal server is located at `http://localhost:5000`. In case of success, the HTTP response is 200:  ``` HTTP code: 200, OK JSON response: {'status': 'success', 'data': {}, 'version': '0.9.dev0+git20200819.84c453a'} ```  On failure, it is 400; the JSON response has `status=\"error\"` with the reason for the failure given in `message`:  ```js {   \"status\": \"error\",   \"message\": \"Invalid API endpoint\",   \"data\": {},   \"version\": \"0.9.1\" } ```  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 0.9.dev0+git20201221.76627dd
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.array_of_groups import ArrayOfGroups
from openapi_client.model.error import Error
from openapi_client.model.inline_object13 import InlineObject13
from openapi_client.model.inline_object14 import InlineObject14
from openapi_client.model.obj_no_id import ObjNoID
from openapi_client.model.single_obj import SingleObj
from openapi_client.model.success import Success
from openapi_client.model.unknownbasetype import UNKNOWNBASETYPE


class SourcesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __api_source_groups_obj_id_patch(
            self,
            obj_id,
            **kwargs
        ):
            """api_source_groups_obj_id_patch  # noqa: E501

            Update a Source table row  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_source_groups_obj_id_patch(obj_id, async_req=True)
            >>> result = thread.get()

            Args:
                obj_id (int):

            Keyword Args:
                inline_object14 (InlineObject14): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Success
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['obj_id'] = \
                obj_id
            return self.call_with_http_info(**kwargs)

        self.api_source_groups_obj_id_patch = Endpoint(
            settings={
                'response_type': (Success,),
                'auth': [],
                'endpoint_path': '/api/source_groups/obj_id',
                'operation_id': 'api_source_groups_obj_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'obj_id',
                    'inline_object14',
                ],
                'required': [
                    'obj_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'obj_id':
                        (int,),
                    'inline_object14':
                        (InlineObject14,),
                },
                'attribute_map': {
                    'obj_id': 'obj_id',
                },
                'location_map': {
                    'obj_id': 'path',
                    'inline_object14': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_source_groups_obj_id_patch
        )

        def __api_source_groups_post(
            self,
            **kwargs
        ):
            """api_source_groups_post  # noqa: E501

            Save or request group(s) to save source, and optionally unsave from group(s).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_source_groups_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                inline_object13 (InlineObject13): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Success
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_source_groups_post = Endpoint(
            settings={
                'response_type': (Success,),
                'auth': [],
                'endpoint_path': '/api/source_groups',
                'operation_id': 'api_source_groups_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'inline_object13',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'inline_object13':
                        (InlineObject13,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'inline_object13': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_source_groups_post
        )

        def __api_sources_get(
            self,
            **kwargs
        ):
            """api_sources_get  # noqa: E501

            Retrieve all sources  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_sources_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                ra (float): RA for spatial filtering. [optional]
                dec (float): Declination for spatial filtering. [optional]
                radius (float): Radius for spatial filtering if ra & dec are provided. [optional]
                source_id (str): Portion of ID to filter on. [optional]
                simbad_class (str): Simbad class to filter on. [optional]
                has_tn_sname (bool): If true, return only those matches with TNS names. [optional]
                num_per_page (int): Number of sources to return per paginated request. Defaults to 100. Max 1000. . [optional]
                page_number (int): Page number for paginated query results. Defaults to 1. [optional]
                total_matches (int): Used only in the case of paginating query results - if provided, this allows for avoiding a potentially expensive query.count() call. . [optional]
                start_date (str): Arrow-parseable date string (e.g. 2020-01-01). If provided, filter by last_detected >= startDate . [optional]
                end_date (str): Arrow-parseable date string (e.g. 2020-01-01). If provided, filter by last_detected <= endDate . [optional]
                group_ids ([int]): If provided, filter only sources saved to one of these group IDs. . [optional]
                include_photometry (bool): Boolean indicating whether to include associated photometry. Defaults to false. . [optional]
                include_requested (bool): Boolean indicating whether to include requested saves. Defaults to false. . [optional]
                pending_only (bool): Boolean indicating whether to only include requested/pending saves. Defaults to false. . [optional]
                saved_before (str): Only return sources that were saved before this UTC datetime. . [optional]
                saved_after (str): Only return sources that were saved after this UTC datetime. . [optional]
                save_summary (bool): Boolean indicating whether to only return the source save information in the response (defaults to false). If true, the response will contain a list of dicts with the following schema under `response['data']['sources']`: ```     {       \"group_id\": 2,       \"created_at\": \"2020-11-13T22:11:25.910271\",       \"saved_by_id\": 1,       \"saved_at\": \"2020-11-13T22:11:25.910271\",       \"requested\": false,       \"unsaved_at\": null,       \"modified\": \"2020-11-13T22:11:25.910271\",       \"obj_id\": \"16fil\",       \"active\": true,       \"unsaved_by_id\": null     } ``` . [optional]
                sort_by (str): The field to sort by. Currently allowed options are [\"id\", \"ra\", \"dec\", \"redshift\", \"saved_at\"] . [optional]
                sort_order (str): The sort order - either \"asc\" or \"desc\". Defaults to \"asc\" . [optional]
                include_comments (bool): Boolean indicating whether to include comment metadata in response. Defaults to false. . [optional]
                include_spectrum_exists (bool): Boolean indicating whether to return if a source has a spectra. Defaults to false. . [optional]
                classifications ([str]): Comma-separated string of \"taxonomy: classification\" pair(s) to filter for sources matching that/those classification(s), i.e. \"Sitewide Taxonomy: Type II, Sitewide Taxonomy: AGN\" . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_sources_get = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/api/sources',
                'operation_id': 'api_sources_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ra',
                    'dec',
                    'radius',
                    'source_id',
                    'simbad_class',
                    'has_tn_sname',
                    'num_per_page',
                    'page_number',
                    'total_matches',
                    'start_date',
                    'end_date',
                    'group_ids',
                    'include_photometry',
                    'include_requested',
                    'pending_only',
                    'saved_before',
                    'saved_after',
                    'save_summary',
                    'sort_by',
                    'sort_order',
                    'include_comments',
                    'include_spectrum_exists',
                    'classifications',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ra':
                        (float,),
                    'dec':
                        (float,),
                    'radius':
                        (float,),
                    'source_id':
                        (str,),
                    'simbad_class':
                        (str,),
                    'has_tn_sname':
                        (bool,),
                    'num_per_page':
                        (int,),
                    'page_number':
                        (int,),
                    'total_matches':
                        (int,),
                    'start_date':
                        (str,),
                    'end_date':
                        (str,),
                    'group_ids':
                        ([int],),
                    'include_photometry':
                        (bool,),
                    'include_requested':
                        (bool,),
                    'pending_only':
                        (bool,),
                    'saved_before':
                        (str,),
                    'saved_after':
                        (str,),
                    'save_summary':
                        (bool,),
                    'sort_by':
                        (str,),
                    'sort_order':
                        (str,),
                    'include_comments':
                        (bool,),
                    'include_spectrum_exists':
                        (bool,),
                    'classifications':
                        ([str],),
                },
                'attribute_map': {
                    'ra': 'ra',
                    'dec': 'dec',
                    'radius': 'radius',
                    'source_id': 'sourceID',
                    'simbad_class': 'simbadClass',
                    'has_tn_sname': 'hasTNSname',
                    'num_per_page': 'numPerPage',
                    'page_number': 'pageNumber',
                    'total_matches': 'totalMatches',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'group_ids': 'group_ids',
                    'include_photometry': 'includePhotometry',
                    'include_requested': 'includeRequested',
                    'pending_only': 'pendingOnly',
                    'saved_before': 'savedBefore',
                    'saved_after': 'savedAfter',
                    'save_summary': 'saveSummary',
                    'sort_by': 'sortBy',
                    'sort_order': 'sortOrder',
                    'include_comments': 'includeComments',
                    'include_spectrum_exists': 'includeSpectrumExists',
                    'classifications': 'classifications',
                },
                'location_map': {
                    'ra': 'query',
                    'dec': 'query',
                    'radius': 'query',
                    'source_id': 'query',
                    'simbad_class': 'query',
                    'has_tn_sname': 'query',
                    'num_per_page': 'query',
                    'page_number': 'query',
                    'total_matches': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'group_ids': 'query',
                    'include_photometry': 'query',
                    'include_requested': 'query',
                    'pending_only': 'query',
                    'saved_before': 'query',
                    'saved_after': 'query',
                    'save_summary': 'query',
                    'sort_by': 'query',
                    'sort_order': 'query',
                    'include_comments': 'query',
                    'include_spectrum_exists': 'query',
                    'classifications': 'query',
                },
                'collection_format_map': {
                    'group_ids': 'multi',
                    'classifications': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_sources_get
        )

        def __api_sources_obj_id_delete(
            self,
            obj_id,
            group_id,
            **kwargs
        ):
            """api_sources_obj_id_delete  # noqa: E501

            Delete a source  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_sources_obj_id_delete(obj_id, group_id, async_req=True)
            >>> result = thread.get()

            Args:
                obj_id (str):
                group_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Success
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['obj_id'] = \
                obj_id
            kwargs['group_id'] = \
                group_id
            return self.call_with_http_info(**kwargs)

        self.api_sources_obj_id_delete = Endpoint(
            settings={
                'response_type': (Success,),
                'auth': [],
                'endpoint_path': '/api/sources/obj_id',
                'operation_id': 'api_sources_obj_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'obj_id',
                    'group_id',
                ],
                'required': [
                    'obj_id',
                    'group_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'obj_id':
                        (str,),
                    'group_id':
                        (str,),
                },
                'attribute_map': {
                    'obj_id': 'obj_id',
                    'group_id': 'group_id',
                },
                'location_map': {
                    'obj_id': 'path',
                    'group_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_sources_obj_id_delete
        )

        def __api_sources_obj_id_finder_get(
            self,
            obj_id,
            **kwargs
        ):
            """api_sources_obj_id_finder_get  # noqa: E501

            Generate a PDF/PNG finding chart to aid in spectroscopy  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_sources_obj_id_finder_get(obj_id, async_req=True)
            >>> result = thread.get()

            Args:
                obj_id (str):

            Keyword Args:
                imsize (float): Image size in arcmin (square). [optional]
                facility (str): [optional]
                image_source (str): Source of the image used in the finding chart. [optional]
                use_ztfref (bool): Use ZTFref catalog for offset star positions, otherwise DR2 . [optional]
                obstime (str): datetime of observation in isoformat (e.g. 2020-12-30T12:34:10) . [optional]
                type (str): output type . [optional]
                num_offset_stars (int): output desired number of offset stars [0,5] (default: 3) . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['obj_id'] = \
                obj_id
            return self.call_with_http_info(**kwargs)

        self.api_sources_obj_id_finder_get = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/api/sources/obj_id/finder',
                'operation_id': 'api_sources_obj_id_finder_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'obj_id',
                    'imsize',
                    'facility',
                    'image_source',
                    'use_ztfref',
                    'obstime',
                    'type',
                    'num_offset_stars',
                ],
                'required': [
                    'obj_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'facility',
                    'image_source',
                    'type',
                ],
                'validation': [
                    'imsize',
                    'num_offset_stars',
                ]
            },
            root_map={
                'validations': {
                    ('imsize',): {

                        'inclusive_maximum': 15,
                        'inclusive_minimum': 2,
                    },
                    ('num_offset_stars',): {

                        'inclusive_maximum': 4,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('facility',): {

                        "KECK": "Keck",
                        "SHANE": "Shane",
                        "P200": "P200"
                    },
                    ('image_source',): {

                        "DESI": "desi",
                        "DSS": "dss",
                        "ZTFREF": "ztfref"
                    },
                    ('type',): {

                        "PNG": "png",
                        "PDF": "pdf"
                    },
                },
                'openapi_types': {
                    'obj_id':
                        (str,),
                    'imsize':
                        (float,),
                    'facility':
                        (str,),
                    'image_source':
                        (str,),
                    'use_ztfref':
                        (bool,),
                    'obstime':
                        (str,),
                    'type':
                        (str,),
                    'num_offset_stars':
                        (int,),
                },
                'attribute_map': {
                    'obj_id': 'obj_id',
                    'imsize': 'imsize',
                    'facility': 'facility',
                    'image_source': 'image_source',
                    'use_ztfref': 'use_ztfref',
                    'obstime': 'obstime',
                    'type': 'type',
                    'num_offset_stars': 'num_offset_stars',
                },
                'location_map': {
                    'obj_id': 'path',
                    'imsize': 'query',
                    'facility': 'query',
                    'image_source': 'query',
                    'use_ztfref': 'query',
                    'obstime': 'query',
                    'type': 'query',
                    'num_offset_stars': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/pdf',
                    'image/png',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_sources_obj_id_finder_get
        )

        def __api_sources_obj_id_get(
            self,
            obj_id,
            **kwargs
        ):
            """api_sources_obj_id_get  # noqa: E501

            Retrieve a source  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_sources_obj_id_get(obj_id, async_req=True)
            >>> result = thread.get()

            Args:
                obj_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SingleObj
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['obj_id'] = \
                obj_id
            return self.call_with_http_info(**kwargs)

        self.api_sources_obj_id_get = Endpoint(
            settings={
                'response_type': (SingleObj,),
                'auth': [],
                'endpoint_path': '/api/sources/obj_id',
                'operation_id': 'api_sources_obj_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'obj_id',
                ],
                'required': [
                    'obj_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'obj_id':
                        (str,),
                },
                'attribute_map': {
                    'obj_id': 'obj_id',
                },
                'location_map': {
                    'obj_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_sources_obj_id_get
        )

        def __api_sources_obj_id_groups_get(
            self,
            obj_id,
            **kwargs
        ):
            """api_sources_obj_id_groups_get  # noqa: E501

            Retrieve basic info on Groups that an Obj is saved to  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_sources_obj_id_groups_get(obj_id, async_req=True)
            >>> result = thread.get()

            Args:
                obj_id (int):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ArrayOfGroups
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['obj_id'] = \
                obj_id
            return self.call_with_http_info(**kwargs)

        self.api_sources_obj_id_groups_get = Endpoint(
            settings={
                'response_type': (ArrayOfGroups,),
                'auth': [],
                'endpoint_path': '/api/sources/obj_id/groups',
                'operation_id': 'api_sources_obj_id_groups_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'obj_id',
                ],
                'required': [
                    'obj_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'obj_id':
                        (int,),
                },
                'attribute_map': {
                    'obj_id': 'obj_id',
                },
                'location_map': {
                    'obj_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_sources_obj_id_groups_get
        )

        def __api_sources_obj_id_head(
            self,
            obj_id,
            **kwargs
        ):
            """api_sources_obj_id_head  # noqa: E501

            Check if a Source exists  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_sources_obj_id_head(obj_id, async_req=True)
            >>> result = thread.get()

            Args:
                obj_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Success
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['obj_id'] = \
                obj_id
            return self.call_with_http_info(**kwargs)

        self.api_sources_obj_id_head = Endpoint(
            settings={
                'response_type': (Success,),
                'auth': [],
                'endpoint_path': '/api/sources/obj_id',
                'operation_id': 'api_sources_obj_id_head',
                'http_method': 'HEAD',
                'servers': None,
            },
            params_map={
                'all': [
                    'obj_id',
                ],
                'required': [
                    'obj_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'obj_id':
                        (str,),
                },
                'attribute_map': {
                    'obj_id': 'obj_id',
                },
                'location_map': {
                    'obj_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_sources_obj_id_head
        )

        def __api_sources_obj_id_offsets_get(
            self,
            obj_id,
            **kwargs
        ):
            """api_sources_obj_id_offsets_get  # noqa: E501

            Retrieve offset stars to aid in spectroscopy  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_sources_obj_id_offsets_get(obj_id, async_req=True)
            >>> result = thread.get()

            Args:
                obj_id (str):

            Keyword Args:
                facility (str): Which facility to generate the starlist for. [optional]
                num_offset_stars (int): Requested number of offset stars (set to zero to get starlist of just the source itself) . [optional]
                obstime (str): datetime of observation in isoformat (e.g. 2020-12-30T12:34:10) . [optional]
                use_ztfref (bool): Use ZTFref catalog for offset star positions, otherwise Gaia DR2 . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['obj_id'] = \
                obj_id
            return self.call_with_http_info(**kwargs)

        self.api_sources_obj_id_offsets_get = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/api/sources/obj_id/offsets',
                'operation_id': 'api_sources_obj_id_offsets_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'obj_id',
                    'facility',
                    'num_offset_stars',
                    'obstime',
                    'use_ztfref',
                ],
                'required': [
                    'obj_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'facility',
                ],
                'validation': [
                    'num_offset_stars',
                ]
            },
            root_map={
                'validations': {
                    ('num_offset_stars',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('facility',): {

                        "KECK": "Keck",
                        "SHANE": "Shane",
                        "P200": "P200"
                    },
                },
                'openapi_types': {
                    'obj_id':
                        (str,),
                    'facility':
                        (str,),
                    'num_offset_stars':
                        (int,),
                    'obstime':
                        (str,),
                    'use_ztfref':
                        (bool,),
                },
                'attribute_map': {
                    'obj_id': 'obj_id',
                    'facility': 'facility',
                    'num_offset_stars': 'num_offset_stars',
                    'obstime': 'obstime',
                    'use_ztfref': 'use_ztfref',
                },
                'location_map': {
                    'obj_id': 'path',
                    'facility': 'query',
                    'num_offset_stars': 'query',
                    'obstime': 'query',
                    'use_ztfref': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_sources_obj_id_offsets_get
        )

        def __api_sources_obj_id_patch(
            self,
            obj_id,
            **kwargs
        ):
            """api_sources_obj_id_patch  # noqa: E501

            Update a source  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_sources_obj_id_patch(obj_id, async_req=True)
            >>> result = thread.get()

            Args:
                obj_id (str):

            Keyword Args:
                obj_no_id (ObjNoID): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Success
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['obj_id'] = \
                obj_id
            return self.call_with_http_info(**kwargs)

        self.api_sources_obj_id_patch = Endpoint(
            settings={
                'response_type': (Success,),
                'auth': [],
                'endpoint_path': '/api/sources/obj_id',
                'operation_id': 'api_sources_obj_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'obj_id',
                    'obj_no_id',
                ],
                'required': [
                    'obj_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'obj_id':
                        (str,),
                    'obj_no_id':
                        (ObjNoID,),
                },
                'attribute_map': {
                    'obj_id': 'obj_id',
                },
                'location_map': {
                    'obj_id': 'path',
                    'obj_no_id': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_sources_obj_id_patch
        )

        def __api_sources_post(
            self,
            **kwargs
        ):
            """api_sources_post  # noqa: E501

            Add a new source  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_sources_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                unknown_base_type (UNKNOWN_BASE_TYPE): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_sources_post = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/api/sources',
                'operation_id': 'api_sources_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'unknown_base_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'unknown_base_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_sources_post
        )
