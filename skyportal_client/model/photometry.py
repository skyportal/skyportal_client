"""
    Fritz: SkyPortal API

    SkyPortal provides an API to access most of its underlying functionality. To use it, you will need an API token. This can be generated via the web application from your profile page or, if you are an admin, you may use the system provisioned token stored inside of `.tokens.yaml`.  ### Accessing the SkyPortal API  Once you have a token, you may access SkyPortal programmatically as follows.  #### Python  ```python import requests  token = 'ea70a5f0-b321-43c6-96a1-b2de225e0339'  def api(method, endpoint, data=None):     headers = {'Authorization': f'token {token}'}     response = requests.request(method, endpoint, json=data, headers=headers)     return response  response = api('GET', 'http://localhost:5000/api/sysinfo')  print(f'HTTP code: {response.status_code}, {response.reason}') if response.status_code in (200, 400):     print(f'JSON response: {response.json()}') ```  #### Command line (curl)  ```shell curl -s -H 'Authorization: token ea70a5f0-b321-43c6-96a1-b2de225e0339' http://localhost:5000/api/sysinfo ```  ### Response  In the above examples, the SkyPortal server is located at `http://localhost:5000`. In case of success, the HTTP response is 200:  ``` HTTP code: 200, OK JSON response: {'status': 'success', 'data': {}, 'version': '0.9.dev0+git20200819.84c453a'} ```  On failure, it is 400; the JSON response has `status=\"error\"` with the reason for the failure given in `message`:  ```js {   \"status\": \"error\",   \"message\": \"Invalid API endpoint\",   \"data\": {},   \"version\": \"0.9.1\" } ```  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 0.9.dev0+git20201221.76627dd
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from skyportal_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


class Photometry(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('filter',): {
            'BESSELLUX': "bessellux",
            'BESSELLB': "bessellb",
            'BESSELLV': "bessellv",
            'BESSELLR': "bessellr",
            'BESSELLI': "besselli",
            'STANDARD::U': "standard::u",
            'STANDARD::B': "standard::b",
            'STANDARD::V': "standard::v",
            'STANDARD::R': "standard::r",
            'STANDARD::I': "standard::i",
            'DESG': "desg",
            'DESR': "desr",
            'DESI': "desi",
            'DESZ': "desz",
            'DESY': "desy",
            'SDSSU': "sdssu",
            'SDSSG': "sdssg",
            'SDSSR': "sdssr",
            'SDSSI': "sdssi",
            'SDSSZ': "sdssz",
            'F435W': "f435w",
            'F475W': "f475w",
            'F555W': "f555w",
            'F606W': "f606w",
            'F625W': "f625w",
            'F775W': "f775w",
            'F850LP': "f850lp",
            'NICF110W': "nicf110w",
            'NICF160W': "nicf160w",
            'F098M': "f098m",
            'F105W': "f105w",
            'F110W': "f110w",
            'F125W': "f125w",
            'F127M': "f127m",
            'F139M': "f139m",
            'F140W': "f140w",
            'F153M': "f153m",
            'F160W': "f160w",
            'F218W': "f218w",
            'F225W': "f225w",
            'F275W': "f275w",
            'F300X': "f300x",
            'F336W': "f336w",
            'F350LP': "f350lp",
            'F390W': "f390w",
            'F689M': "f689m",
            'F763M': "f763m",
            'F845M': "f845m",
            'F438W': "f438w",
            'UVF475W': "uvf475w",
            'UVF555W': "uvf555w",
            'UVF606W': "uvf606w",
            'UVF625W': "uvf625w",
            'UVF775W': "uvf775w",
            'UVF814W': "uvf814w",
            'UVF850LP': "uvf850lp",
            'KEPLER': "kepler",
            'CSPB': "cspb",
            'CSPHS': "csphs",
            'CSPHD': "csphd",
            'CSPJS': "cspjs",
            'CSPJD': "cspjd",
            'CSPV3009': "cspv3009",
            'CSPV3014': "cspv3014",
            'CSPV9844': "cspv9844",
            'CSPYS': "cspys",
            'CSPYD': "cspyd",
            'CSPG': "cspg",
            'CSPI': "cspi",
            'CSPK': "cspk",
            'CSPR': "cspr",
            'CSPU': "cspu",
            'F070W': "f070w",
            'F090W': "f090w",
            'F115W': "f115w",
            'F150W': "f150w",
            'F200W': "f200w",
            'F277W': "f277w",
            'F356W': "f356w",
            'F444W': "f444w",
            'F140M': "f140m",
            'F162M': "f162m",
            'F182M': "f182m",
            'F210M': "f210m",
            'F250M': "f250m",
            'F300M': "f300m",
            'F335M': "f335m",
            'F360M': "f360m",
            'F410M': "f410m",
            'F430M': "f430m",
            'F460M': "f460m",
            'F480M': "f480m",
            'F560W': "f560w",
            'F770W': "f770w",
            'F1000W': "f1000w",
            'F1130W': "f1130w",
            'F1280W': "f1280w",
            'F1500W': "f1500w",
            'F1800W': "f1800w",
            'F2100W': "f2100w",
            'F2550W': "f2550w",
            'F1065C': "f1065c",
            'F1140C': "f1140c",
            'F1550C': "f1550c",
            'F2300C': "f2300c",
            'LSSTU': "lsstu",
            'LSSTG': "lsstg",
            'LSSTR': "lsstr",
            'LSSTI': "lssti",
            'LSSTZ': "lsstz",
            'LSSTY': "lssty",
            'KEPLERCAM::US': "keplercam::us",
            'KEPLERCAM::B': "keplercam::b",
            'KEPLERCAM::V': "keplercam::v",
            'KEPLERCAM::R': "keplercam::r",
            'KEPLERCAM::I': "keplercam::i",
            '4SHOOTER2::US': "4shooter2::us",
            '4SHOOTER2::B': "4shooter2::b",
            '4SHOOTER2::V': "4shooter2::v",
            '4SHOOTER2::R': "4shooter2::r",
            '4SHOOTER2::I': "4shooter2::i",
            'ZTFG': "ztfg",
            'ZTFR': "ztfr",
            'ZTFI': "ztfi",
            'UVOT::B': "uvot::b",
            'UVOT::U': "uvot::u",
            'UVOT::UVM2': "uvot::uvm2",
            'UVOT::UVW1': "uvot::uvw1",
            'UVOT::UVW2': "uvot::uvw2",
            'UVOT::V': "uvot::v",
            'UVOT::WHITE': "uvot::white",
        },
    }

    validations = {
        ('filter',): {
            'max_length': 13,
        },
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'mjd': (float,),  # noqa: E501
            'fluxerr': (float,),  # noqa: E501
            'filter': (str,),  # noqa: E501
            'obj_id': (str,),  # noqa: E501
            'instrument_id': (int,),  # noqa: E501
            'owner_id': (int,),  # noqa: E501
            'id': (int,),  # noqa: E501
            'ra': (float, none_type,),  # noqa: E501
            'dec': (float, none_type,),  # noqa: E501
            'flux': (float,),  # noqa: E501
            'ra_unc': (float, none_type,),  # noqa: E501
            'dec_unc': (float, none_type,),  # noqa: E501
            'original_user_data': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'altdata': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'upload_id': (str,),  # noqa: E501
            'origin': (str,),  # noqa: E501
            'followup_request_id': (int, none_type,),  # noqa: E501
            'assignment_id': (int, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'mjd': 'mjd',  # noqa: E501
        'fluxerr': 'fluxerr',  # noqa: E501
        'filter': 'filter',  # noqa: E501
        'obj_id': 'obj_id',  # noqa: E501
        'instrument_id': 'instrument_id',  # noqa: E501
        'owner_id': 'owner_id',  # noqa: E501
        'id': 'id',  # noqa: E501
        'ra': 'ra',  # noqa: E501
        'dec': 'dec',  # noqa: E501
        'flux': 'flux',  # noqa: E501
        'ra_unc': 'ra_unc',  # noqa: E501
        'dec_unc': 'dec_unc',  # noqa: E501
        'original_user_data': 'original_user_data',  # noqa: E501
        'altdata': 'altdata',  # noqa: E501
        'upload_id': 'upload_id',  # noqa: E501
        'origin': 'origin',  # noqa: E501
        'followup_request_id': 'followup_request_id',  # noqa: E501
        'assignment_id': 'assignment_id',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, mjd, fluxerr, filter, obj_id, instrument_id, owner_id, *args, **kwargs):  # noqa: E501
        """Photometry - a model defined in OpenAPI

        Args:
            mjd (float): MJD of the observation.
            fluxerr (float): Gaussian error on the flux in µJy.
            filter (str): Filter with which the observation was taken.
            obj_id (str): ID of the Photometry's Obj.
            instrument_id (int): ID of the Instrument that took this Photometry.
            owner_id (int): ID of the User who uploaded the photometry.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): Unique object identifier.. [optional]  # noqa: E501
            ra (float, none_type): [optional]  # noqa: E501
            dec (float, none_type): [optional]  # noqa: E501
            flux (float): Flux of the observation in µJy. Corresponds to an AB Zeropoint of 23.9 in all filters.. [optional]  # noqa: E501
            ra_unc (float, none_type): Uncertainty of ra position [arcsec]. [optional]  # noqa: E501
            dec_unc (float, none_type): Uncertainty of dec position [arcsec]. [optional]  # noqa: E501
            original_user_data (bool, date, datetime, dict, float, int, list, str, none_type): Original data passed by the user through the PhotometryHandler.POST API or the PhotometryHandler.PUT API. The schema of this JSON validates under either schema.PhotometryFlux or schema.PhotometryMag (depending on how the data was passed).. [optional]  # noqa: E501
            altdata (bool, date, datetime, dict, float, int, list, str, none_type): Arbitrary metadata in JSON format... [optional]  # noqa: E501
            upload_id (str): ID of the batch in which this Photometry was uploaded (for bulk deletes).. [optional]  # noqa: E501
            origin (str): Origin from which this Photometry was extracted (if any).. [optional]  # noqa: E501
            followup_request_id (int, none_type): [optional]  # noqa: E501
            assignment_id (int, none_type): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.mjd = mjd
        self.fluxerr = fluxerr
        self.filter = filter
        self.obj_id = obj_id
        self.instrument_id = instrument_id
        self.owner_id = owner_id
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
