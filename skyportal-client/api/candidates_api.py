"""
    Fritz: SkyPortal API

    SkyPortal provides an API to access most of its underlying functionality. To use it, you will need an API token. This can be generated via the web application from your profile page or, if you are an admin, you may use the system provisioned token stored inside of `.tokens.yaml`.  ### Accessing the SkyPortal API  Once you have a token, you may access SkyPortal programmatically as follows.  #### Python  ```python import requests  token = 'ea70a5f0-b321-43c6-96a1-b2de225e0339'  def api(method, endpoint, data=None):     headers = {'Authorization': f'token {token}'}     response = requests.request(method, endpoint, json=data, headers=headers)     return response  response = api('GET', 'http://localhost:5000/api/sysinfo')  print(f'HTTP code: {response.status_code}, {response.reason}') if response.status_code in (200, 400):     print(f'JSON response: {response.json()}') ```  #### Command line (curl)  ```shell curl -s -H 'Authorization: token ea70a5f0-b321-43c6-96a1-b2de225e0339' http://localhost:5000/api/sysinfo ```  ### Response  In the above examples, the SkyPortal server is located at `http://localhost:5000`. In case of success, the HTTP response is 200:  ``` HTTP code: 200, OK JSON response: {'status': 'success', 'data': {}, 'version': '0.9.dev0+git20200819.84c453a'} ```  On failure, it is 400; the JSON response has `status=\"error\"` with the reason for the failure given in `message`:  ```js {   \"status\": \"error\",   \"message\": \"Invalid API endpoint\",   \"data\": {},   \"version\": \"0.9.1\" } ```  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 0.9.dev0+git20201221.76627dd
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from skyportal-client.api_client import ApiClient, Endpoint
from skyportal-client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from skyportal-client.model.error import Error
from skyportal-client.model.list import List
from skyportal-client.model.single_obj import SingleObj
from skyportal-client.model.success import Success
from skyportal-client.model.unknownbasetype import UNKNOWNBASETYPE


class CandidatesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __api_candidates_candidate_id_delete(
            self,
            candidate_id,
            **kwargs
        ):
            """api_candidates_candidate_id_delete  # noqa: E501

            Delete a candidate  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_candidates_candidate_id_delete(candidate_id, async_req=True)
            >>> result = thread.get()

            Args:
                candidate_id (int):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Success
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['candidate_id'] = \
                candidate_id
            return self.call_with_http_info(**kwargs)

        self.api_candidates_candidate_id_delete = Endpoint(
            settings={
                'response_type': (Success,),
                'auth': [],
                'endpoint_path': '/api/candidates/candidate_id',
                'operation_id': 'api_candidates_candidate_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'candidate_id',
                ],
                'required': [
                    'candidate_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'candidate_id':
                        (int,),
                },
                'attribute_map': {
                    'candidate_id': 'candidate_id',
                },
                'location_map': {
                    'candidate_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_candidates_candidate_id_delete
        )

        def __api_candidates_get(
            self,
            **kwargs
        ):
            """api_candidates_get  # noqa: E501

            Retrieve all candidates  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_candidates_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                num_per_page (int): Number of candidates to return per paginated request. Defaults to 25 . [optional]
                page_number (int): Page number for paginated query results. Defaults to 1. [optional]
                total_matches (int): Used only in the case of paginating query results - if provided, this allows for avoiding a potentially expensive query.count() call. . [optional]
                unsaved_only (bool): Boolean indicating whether to return only unsaved candidates. [optional]
                start_date (str): Arrow-parseable date string (e.g. 2020-01-01). If provided, filter by Candidate.passed_at >= startDate . [optional]
                end_date (str): Arrow-parseable date string (e.g. 2020-01-01). If provided, filter by Candidate.passed_at <= endDate . [optional]
                group_i_ds ([int]): Comma-separated string of group IDs (e.g. \"1,2\"). Defaults to all of user's groups if filterIDs is not provided. . [optional]
                filter_i_ds ([int]): Comma-separated string of filter IDs (e.g. \"1,2\"). Defaults to all of user's groups' filters if groupIDs is not provided. . [optional]
                sort_by_annotation_origin (str): The origin of the Annotation to sort by . [optional]
                sort_by_annotation_key (str): The key of the Annotation data value to sort by . [optional]
                sort_by_annotation_order (str): The sort order for annotations - either \"asc\" or \"desc\". Defaults to \"asc\". . [optional]
                annotation_filter_list ([str]): Comma-separated string of JSON objects representing annotation filters. Filter objects are expected to have keys { origin, key, value } for non-numeric value types, or { origin, key, min, max } for numeric values. . [optional]
                include_photometry (bool): Boolean indicating whether to include associated photometry. Defaults to false. . [optional]
                classifications ([str]): Comma-separated string of classification(s) to filter for candidates matching that/those classification(s). . [optional]
                redshift_range (List): lowest and highest redshift to return, e.g. \"(0,0.5)\" . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_candidates_get = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/api/candidates',
                'operation_id': 'api_candidates_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'num_per_page',
                    'page_number',
                    'total_matches',
                    'unsaved_only',
                    'start_date',
                    'end_date',
                    'group_i_ds',
                    'filter_i_ds',
                    'sort_by_annotation_origin',
                    'sort_by_annotation_key',
                    'sort_by_annotation_order',
                    'annotation_filter_list',
                    'include_photometry',
                    'classifications',
                    'redshift_range',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'num_per_page':
                        (int,),
                    'page_number':
                        (int,),
                    'total_matches':
                        (int,),
                    'unsaved_only':
                        (bool,),
                    'start_date':
                        (str,),
                    'end_date':
                        (str,),
                    'group_i_ds':
                        ([int],),
                    'filter_i_ds':
                        ([int],),
                    'sort_by_annotation_origin':
                        (str,),
                    'sort_by_annotation_key':
                        (str,),
                    'sort_by_annotation_order':
                        (str,),
                    'annotation_filter_list':
                        ([str],),
                    'include_photometry':
                        (bool,),
                    'classifications':
                        ([str],),
                    'redshift_range':
                        (List,),
                },
                'attribute_map': {
                    'num_per_page': 'numPerPage',
                    'page_number': 'pageNumber',
                    'total_matches': 'totalMatches',
                    'unsaved_only': 'unsavedOnly',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'group_i_ds': 'groupIDs',
                    'filter_i_ds': 'filterIDs',
                    'sort_by_annotation_origin': 'sortByAnnotationOrigin',
                    'sort_by_annotation_key': 'sortByAnnotationKey',
                    'sort_by_annotation_order': 'sortByAnnotationOrder',
                    'annotation_filter_list': 'annotationFilterList',
                    'include_photometry': 'includePhotometry',
                    'classifications': 'classifications',
                    'redshift_range': 'redshiftRange',
                },
                'location_map': {
                    'num_per_page': 'query',
                    'page_number': 'query',
                    'total_matches': 'query',
                    'unsaved_only': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'group_i_ds': 'query',
                    'filter_i_ds': 'query',
                    'sort_by_annotation_origin': 'query',
                    'sort_by_annotation_key': 'query',
                    'sort_by_annotation_order': 'query',
                    'annotation_filter_list': 'query',
                    'include_photometry': 'query',
                    'classifications': 'query',
                    'redshift_range': 'query',
                },
                'collection_format_map': {
                    'group_i_ds': 'csv',
                    'filter_i_ds': 'csv',
                    'annotation_filter_list': 'csv',
                    'classifications': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_candidates_get
        )

        def __api_candidates_obj_id_get(
            self,
            obj_id,
            **kwargs
        ):
            """api_candidates_obj_id_get  # noqa: E501

            Retrieve a candidate  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_candidates_obj_id_get(obj_id, async_req=True)
            >>> result = thread.get()

            Args:
                obj_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SingleObj
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['obj_id'] = \
                obj_id
            return self.call_with_http_info(**kwargs)

        self.api_candidates_obj_id_get = Endpoint(
            settings={
                'response_type': (SingleObj,),
                'auth': [],
                'endpoint_path': '/api/candidates/obj_id',
                'operation_id': 'api_candidates_obj_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'obj_id',
                ],
                'required': [
                    'obj_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'obj_id':
                        (str,),
                },
                'attribute_map': {
                    'obj_id': 'obj_id',
                },
                'location_map': {
                    'obj_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_candidates_obj_id_get
        )

        def __api_candidates_obj_id_head(
            self,
            obj_id,
            **kwargs
        ):
            """api_candidates_obj_id_head  # noqa: E501

            Check if a Candidate exists  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_candidates_obj_id_head(obj_id, async_req=True)
            >>> result = thread.get()

            Args:
                obj_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Success
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['obj_id'] = \
                obj_id
            return self.call_with_http_info(**kwargs)

        self.api_candidates_obj_id_head = Endpoint(
            settings={
                'response_type': (Success,),
                'auth': [],
                'endpoint_path': '/api/candidates/obj_id',
                'operation_id': 'api_candidates_obj_id_head',
                'http_method': 'HEAD',
                'servers': None,
            },
            params_map={
                'all': [
                    'obj_id',
                ],
                'required': [
                    'obj_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'obj_id':
                        (str,),
                },
                'attribute_map': {
                    'obj_id': 'obj_id',
                },
                'location_map': {
                    'obj_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_candidates_obj_id_head
        )

        def __api_candidates_post(
            self,
            **kwargs
        ):
            """api_candidates_post  # noqa: E501

            Create new candidate(s) (one per filter).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_candidates_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                unknown_base_type (UNKNOWN_BASE_TYPE): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_candidates_post = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/api/candidates',
                'operation_id': 'api_candidates_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'unknown_base_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'unknown_base_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_candidates_post
        )
